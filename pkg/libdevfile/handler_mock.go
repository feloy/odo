// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/libdevfile/libdevfile.go

// Package libdevfile is a generated GoMock package.
package libdevfile

import (
	reflect "reflect"

	v1alpha2 "github.com/devfile/api/v2/pkg/apis/workspaces/v1alpha2"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ApplyImage mocks base method.
func (m *MockHandler) ApplyImage(image v1alpha2.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyImage indicates an expected call of ApplyImage.
func (mr *MockHandlerMockRecorder) ApplyImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyImage", reflect.TypeOf((*MockHandler)(nil).ApplyImage), image)
}

// ApplyKubernetes mocks base method.
func (m *MockHandler) ApplyKubernetes(kubernetes v1alpha2.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKubernetes", kubernetes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyKubernetes indicates an expected call of ApplyKubernetes.
func (mr *MockHandlerMockRecorder) ApplyKubernetes(kubernetes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKubernetes", reflect.TypeOf((*MockHandler)(nil).ApplyKubernetes), kubernetes)
}
