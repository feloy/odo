/*
 * odo dev
 *
 * API interface for 'odo dev'
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type DevfileContent struct {
	Content string `json:"content,omitempty"`

	Commands []Command `json:"commands,omitempty"`

	Containers []Container `json:"containers,omitempty"`

	Images []Image `json:"images,omitempty"`

	Resources []Resource `json:"resources,omitempty"`

	Events Events `json:"events,omitempty"`

	Metadata Metadata `json:"metadata,omitempty"`
}

// AssertDevfileContentRequired checks if the required fields are not zero-ed
func AssertDevfileContentRequired(obj DevfileContent) error {
	for _, el := range obj.Commands {
		if err := AssertCommandRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Containers {
		if err := AssertContainerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Images {
		if err := AssertImageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Resources {
		if err := AssertResourceRequired(el); err != nil {
			return err
		}
	}
	if err := AssertEventsRequired(obj.Events); err != nil {
		return err
	}
	if err := AssertMetadataRequired(obj.Metadata); err != nil {
		return err
	}
	return nil
}

// AssertRecurseDevfileContentRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of DevfileContent (e.g. [][]DevfileContent), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDevfileContentRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDevfileContent, ok := obj.(DevfileContent)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDevfileContentRequired(aDevfileContent)
	})
}
