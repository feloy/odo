/*
 * odo dev
 *
 * API interface for 'odo dev'
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"ComponentCommandPost",
			strings.ToUpper("Post"),
			"/api/v1/component/command",
			c.ComponentCommandPost,
		},
		{
			"ComponentGet",
			strings.ToUpper("Get"),
			"/api/v1/component",
			c.ComponentGet,
		},
		{
			"DevstateContainerContainerNameDelete",
			strings.ToUpper("Delete"),
			"/api/v1/devstate/container/{containerName}",
			c.DevstateContainerContainerNameDelete,
		},
		{
			"DevstateContainerPost",
			strings.ToUpper("Post"),
			"/api/v1/devstate/container",
			c.DevstateContainerPost,
		},
		{
			"DevstateImageImageNameDelete",
			strings.ToUpper("Delete"),
			"/api/v1/devstate/image/{imageName}",
			c.DevstateImageImageNameDelete,
		},
		{
			"DevstateImagePost",
			strings.ToUpper("Post"),
			"/api/v1/devstate/image",
			c.DevstateImagePost,
		},
		{
			"DevstateResourcePost",
			strings.ToUpper("Post"),
			"/api/v1/devstate/resource",
			c.DevstateResourcePost,
		},
		{
			"DevstateResourceResourceNameDelete",
			strings.ToUpper("Delete"),
			"/api/v1/devstate/resource/{resourceName}",
			c.DevstateResourceResourceNameDelete,
		},
		{
			"InstanceDelete",
			strings.ToUpper("Delete"),
			"/api/v1/instance",
			c.InstanceDelete,
		},
		{
			"InstanceGet",
			strings.ToUpper("Get"),
			"/api/v1/instance",
			c.InstanceGet,
		},
	}
}

// ComponentCommandPost -
func (c *DefaultApiController) ComponentCommandPost(w http.ResponseWriter, r *http.Request) {
	componentCommandPostRequestParam := ComponentCommandPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&componentCommandPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComponentCommandPostRequestRequired(componentCommandPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ComponentCommandPost(r.Context(), componentCommandPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ComponentGet -
func (c *DefaultApiController) ComponentGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ComponentGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DevstateContainerContainerNameDelete -
func (c *DefaultApiController) DevstateContainerContainerNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	containerNameParam := params["containerName"]
	result, err := c.service.DevstateContainerContainerNameDelete(r.Context(), containerNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DevstateContainerPost -
func (c *DefaultApiController) DevstateContainerPost(w http.ResponseWriter, r *http.Request) {
	devstateContainerPostRequestParam := DevstateContainerPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&devstateContainerPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDevstateContainerPostRequestRequired(devstateContainerPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DevstateContainerPost(r.Context(), devstateContainerPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DevstateImageImageNameDelete -
func (c *DefaultApiController) DevstateImageImageNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	imageNameParam := params["imageName"]
	result, err := c.service.DevstateImageImageNameDelete(r.Context(), imageNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DevstateImagePost -
func (c *DefaultApiController) DevstateImagePost(w http.ResponseWriter, r *http.Request) {
	devstateImagePostRequestParam := DevstateImagePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&devstateImagePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDevstateImagePostRequestRequired(devstateImagePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DevstateImagePost(r.Context(), devstateImagePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DevstateResourcePost -
func (c *DefaultApiController) DevstateResourcePost(w http.ResponseWriter, r *http.Request) {
	devstateResourcePostRequestParam := DevstateResourcePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&devstateResourcePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDevstateResourcePostRequestRequired(devstateResourcePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DevstateResourcePost(r.Context(), devstateResourcePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DevstateResourceResourceNameDelete -
func (c *DefaultApiController) DevstateResourceResourceNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceNameParam := params["resourceName"]
	result, err := c.service.DevstateResourceResourceNameDelete(r.Context(), resourceNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// InstanceDelete -
func (c *DefaultApiController) InstanceDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.InstanceDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// InstanceGet -
func (c *DefaultApiController) InstanceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.InstanceGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
