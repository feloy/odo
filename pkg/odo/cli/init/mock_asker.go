// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/odo/cli/init/asker.go

// Package init is a generated GoMock package.
package init

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	catalog "github.com/redhat-developer/odo/pkg/catalog"
)

// Mockasker is a mock of asker interface.
type Mockasker struct {
	ctrl     *gomock.Controller
	recorder *MockaskerMockRecorder
}

// MockaskerMockRecorder is the mock recorder for Mockasker.
type MockaskerMockRecorder struct {
	mock *Mockasker
}

// NewMockasker creates a new mock instance.
func NewMockasker(ctrl *gomock.Controller) *Mockasker {
	mock := &Mockasker{ctrl: ctrl}
	mock.recorder = &MockaskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockasker) EXPECT() *MockaskerMockRecorder {
	return m.recorder
}

// askLanguage mocks base method.
func (m *Mockasker) askLanguage(langs []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "askLanguage", langs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// askLanguage indicates an expected call of askLanguage.
func (mr *MockaskerMockRecorder) askLanguage(langs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "askLanguage", reflect.TypeOf((*Mockasker)(nil).askLanguage), langs)
}

// askName mocks base method.
func (m *Mockasker) askName(defaultName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "askName", defaultName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// askName indicates an expected call of askName.
func (mr *MockaskerMockRecorder) askName(defaultName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "askName", reflect.TypeOf((*Mockasker)(nil).askName), defaultName)
}

// askStarterProject mocks base method.
func (m *Mockasker) askStarterProject(projects []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "askStarterProject", projects)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// askStarterProject indicates an expected call of askStarterProject.
func (mr *MockaskerMockRecorder) askStarterProject(projects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "askStarterProject", reflect.TypeOf((*Mockasker)(nil).askStarterProject), projects)
}

// askType mocks base method.
func (m *Mockasker) askType(types catalog.TypesWithDetails) (catalog.DevfileComponentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "askType", types)
	ret0, _ := ret[0].(catalog.DevfileComponentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// askType indicates an expected call of askType.
func (mr *MockaskerMockRecorder) askType(types interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "askType", reflect.TypeOf((*Mockasker)(nil).askType), types)
}
