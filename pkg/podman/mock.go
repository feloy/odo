// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/podman/interface.go

// Package podman is a generated GoMock package.
package podman

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// PlayKube mocks base method.
func (m *MockClient) PlayKube(pod *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayKube", pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlayKube indicates an expected call of PlayKube.
func (mr *MockClientMockRecorder) PlayKube(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayKube", reflect.TypeOf((*MockClient)(nil).PlayKube), pod)
}

// PodRm mocks base method.
func (m *MockClient) PodRm(podname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodRm", podname)
	ret0, _ := ret[0].(error)
	return ret0
}

// PodRm indicates an expected call of PodRm.
func (mr *MockClientMockRecorder) PodRm(podname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodRm", reflect.TypeOf((*MockClient)(nil).PodRm), podname)
}

// PodStop mocks base method.
func (m *MockClient) PodStop(podname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodStop", podname)
	ret0, _ := ret[0].(error)
	return ret0
}

// PodStop indicates an expected call of PodStop.
func (mr *MockClientMockRecorder) PodStop(podname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodStop", reflect.TypeOf((*MockClient)(nil).PodStop), podname)
}

// VolumeRm mocks base method.
func (m *MockClient) VolumeRm(volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRm", volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRm indicates an expected call of VolumeRm.
func (mr *MockClientMockRecorder) VolumeRm(volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRm", reflect.TypeOf((*MockClient)(nil).VolumeRm), volumeName)
}
